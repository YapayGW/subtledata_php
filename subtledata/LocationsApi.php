<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class LocationsApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  /**
	 * getAllLocations
	 * Get all of your locations
   * api_key, string: Subtledata API Key (required)
   * use_cache, bool: Utilize Cached Data (optional)
   * @return array[Location]
	 */

   public function getAllLocations($api_key, $use_cache=null) {

  		//parse inputs
  		$resourcePath = "/locations";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($use_cache != null) {
  		  $queryParams['use_cache'] = $this->apiClient->toQueryValue($use_cache);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[Location]');
  		return $responseObject;

      }
  /**
	 * getLocationsNear
	 * Get locations near a GPS coordinate
   * api_key, string: Subtledata API Key (required)
   * use_cache, bool: Utilize Cached Data (optional)
   * latitude, float: Latitude floating point value of search coordinate (required)
   * longitude, float: Longitude floating point value of search coordinate (required)
   * radius, float: Distance (in miles) to search near coordinate (required)
   * @return array[Location]
	 */

   public function getLocationsNear($api_key, $use_cache=null, $latitude, $longitude, $radius) {

  		//parse inputs
  		$resourcePath = "/locations/filter/near";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($use_cache != null) {
  		  $queryParams['use_cache'] = $this->apiClient->toQueryValue($use_cache);
  		}
  		if($latitude != null) {
  		  $queryParams['latitude'] = $this->apiClient->toQueryValue($latitude);
  		}
  		if($longitude != null) {
  		  $queryParams['longitude'] = $this->apiClient->toQueryValue($longitude);
  		}
  		if($radius != null) {
  		  $queryParams['radius'] = $this->apiClient->toQueryValue($radius);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[Location]');
  		return $responseObject;

      }
  /**
	 * getLocation
	 * Get a location by ID
   * location_id, int: Subtledata Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * use_cache, bool: Utilize Cached Data (optional)
   * @return Location
	 */

   public function getLocation($location_id, $api_key, $use_cache=null) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($use_cache != null) {
  		  $queryParams['use_cache'] = $this->apiClient->toQueryValue($use_cache);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Location');
  		return $responseObject;

      }
  /**
	 * getLocationMenu
	 * Get a location's Menu
   * location_id, int: Subtledata Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * use_cache, bool: Utilize Cached Data (optional)
   * @return array[Category]
	 */

   public function getLocationMenu($location_id, $api_key, $use_cache=null) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/menu";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($use_cache != null) {
  		  $queryParams['use_cache'] = $this->apiClient->toQueryValue($use_cache);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[Category]');
  		return $responseObject;

      }
  /**
	 * getLocationPOSMenu
	 * Get a location's POS Menu
   * location_id, int: Subtledata Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * use_cache, bool: Utilize Cached Data (optional)
   * @return array[POSCategory]
	 */

   public function getLocationPOSMenu($location_id, $api_key, $use_cache=null) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/pos_menu";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($use_cache != null) {
  		  $queryParams['use_cache'] = $this->apiClient->toQueryValue($use_cache);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[POSCategory]');
  		return $responseObject;

      }
  /**
	 * getMenuItem
	 * Get details about a menu item
   * location_id, int: Subtledata Location ID (required)
   * item_id, int: Subtledata Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * use_cache, bool: Utilize Cached Data (optional)
   * @return MenuItem
	 */

   public function getMenuItem($location_id, $item_id, $api_key, $use_cache=null) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/menu/items/{item_id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($use_cache != null) {
  		  $queryParams['use_cache'] = $this->apiClient->toQueryValue($use_cache);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($item_id != null) {
  			$resourcePath = str_replace("{" . "item_id" . "}",
  			                            $this->apiClient->toPathValue($item_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'MenuItem');
  		return $responseObject;

      }
  /**
	 * getLocationEmployees
	 * Get a list of employees by location ID
   * location_id, int: Subtledata Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * manager_id, int:  (required)
   * revenue_center_id, int:  (optional)
   * @return array[Employee]
	 */

   public function getLocationEmployees($location_id, $api_key, $manager_id, $revenue_center_id=null) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/employees";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($manager_id != null) {
  		  $queryParams['manager_id'] = $this->apiClient->toQueryValue($manager_id);
  		}
  		if($revenue_center_id != null) {
  		  $queryParams['revenue_center_id'] = $this->apiClient->toQueryValue($revenue_center_id);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[Employee]');
  		return $responseObject;

      }
  /**
	 * getTableList
	 * Get a list of tables by location ID
   * location_id, int: Subtledata Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * use_cache, bool: Utilize Cached Data (optional)
   * @return array[TableMinimal]
	 */

   public function getTableList($location_id, $api_key, $use_cache=null) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tables";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($use_cache != null) {
  		  $queryParams['use_cache'] = $this->apiClient->toQueryValue($use_cache);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[TableMinimal]');
  		return $responseObject;

      }
  /**
	 * getTickets
	 * Get a list of tickets by location ID
   * location_id, int: Subtledata Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * condensed, bool: Remove ticket details (optional)
   * @return array[Ticket]
	 */

   public function getTickets($location_id, $api_key, $condensed=null) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($condensed != null) {
  		  $queryParams['condensed'] = $this->apiClient->toQueryValue($condensed);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[Ticket]');
  		return $responseObject;

      }
  /**
	 * createTicket
	 * Create a ticket
   * location_id, int: Subtledata Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * ticket_type, string: Order Type (optional)
   * body, NewTicket: New Ticket Object (required)
   * @return TicketStatus
	 */

   public function createTicket($location_id, $api_key, $ticket_type=null, $body) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($ticket_type != null) {
  		  $queryParams['ticket_type'] = $this->apiClient->toQueryValue($ticket_type);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'TicketStatus');
  		return $responseObject;

      }
  /**
	 * getTabs
	 * Get a list of tabs by location ID
   * location_id, int: Subtledata Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * @return array[Tab]
	 */

   public function getTabs($location_id, $api_key) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tabs";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[Tab]');
  		return $responseObject;

      }
  /**
	 * getTable
	 * Get a table by location ID and unique ID
   * location_id, int: Subtledata Location ID (required)
   * table_id, int: Subtledata Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * @return TableDetails
	 */

   public function getTable($location_id, $table_id, $api_key) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tables/{table_id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($table_id != null) {
  			$resourcePath = str_replace("{" . "table_id" . "}",
  			                            $this->apiClient->toPathValue($table_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'TableDetails');
  		return $responseObject;

      }
  /**
	 * getTicket
	 * Get a ticket by ID
   * location_id, int: SubtleData Location ID (required)
   * ticket_id, int: SubtleData Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * user_id, int:  (optional)
   * @return Ticket
	 */

   public function getTicket($location_id, $ticket_id, $api_key, $user_id=null) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets/{ticket_id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($user_id != null) {
  		  $queryParams['user_id'] = $this->apiClient->toQueryValue($user_id);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($ticket_id != null) {
  			$resourcePath = str_replace("{" . "ticket_id" . "}",
  			                            $this->apiClient->toPathValue($ticket_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Ticket');
  		return $responseObject;

      }
  /**
	 * voidTicket
	 * Void a ticket
   * location_id, int: SubtleData Location ID (required)
   * ticket_id, int: SubtleData Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * user_id, int:  (optional)
   * @return Status
	 */

   public function voidTicket($location_id, $ticket_id, $api_key, $user_id=null) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets/{ticket_id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($user_id != null) {
  		  $queryParams['user_id'] = $this->apiClient->toQueryValue($user_id);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($ticket_id != null) {
  			$resourcePath = str_replace("{" . "ticket_id" . "}",
  			                            $this->apiClient->toPathValue($ticket_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Status');
  		return $responseObject;

      }
  /**
	 * getTicketWithPOS_ID
	 * Get a ticket by POS ID
   * location_id, int: SubtleData Location ID (required)
   * pos_ticket_id, int: SubtleData Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * user_id, int:  (optional)
   * @return Ticket
	 */

   public function getTicketWithPOS_ID($location_id, $pos_ticket_id, $api_key, $user_id=null) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets/pos/{pos_ticket_id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($user_id != null) {
  		  $queryParams['user_id'] = $this->apiClient->toQueryValue($user_id);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($pos_ticket_id != null) {
  			$resourcePath = str_replace("{" . "pos_ticket_id" . "}",
  			                            $this->apiClient->toPathValue($pos_ticket_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Ticket');
  		return $responseObject;

      }
  /**
	 * submitOrder
	 * Order the currently staged items
   * location_id, int: SubtleData Location ID (required)
   * ticket_id, int: SubtleData Location ID (required)
   * user_id, int: SubtleData Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * @return OrderResults
	 */

   public function submitOrder($location_id, $ticket_id, $user_id, $api_key) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets/{ticket_id}/users/{user_id}/order";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($ticket_id != null) {
  			$resourcePath = str_replace("{" . "ticket_id" . "}",
  			                            $this->apiClient->toPathValue($ticket_id), $resourcePath);
  		}
  		if($user_id != null) {
  			$resourcePath = str_replace("{" . "user_id" . "}",
  			                            $this->apiClient->toPathValue($user_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'OrderResults');
  		return $responseObject;

      }
  /**
	 * addItemsToOrder
	 * Add items to currently staged order on a ticket
   * location_id, int: SubtleData Location ID (required)
   * ticket_id, int: SubtleData Location ID (required)
   * user_id, int: SubtleData Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * body, ItemToAdd: The Item object to Add (required)
   * @return Status
	 */

   public function addItemsToOrder($location_id, $ticket_id, $user_id, $api_key, $body) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets/{ticket_id}/users/{user_id}/order";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($ticket_id != null) {
  			$resourcePath = str_replace("{" . "ticket_id" . "}",
  			                            $this->apiClient->toPathValue($ticket_id), $resourcePath);
  		}
  		if($user_id != null) {
  			$resourcePath = str_replace("{" . "user_id" . "}",
  			                            $this->apiClient->toPathValue($user_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Status');
  		return $responseObject;

      }
  /**
	 * getUsersConnectedToTicket
	 * Get users connected to a ticket
   * location_id, int: SubtleData Location ID (required)
   * ticket_id, int: SubtleData Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * @return array[User]
	 */

   public function getUsersConnectedToTicket($location_id, $ticket_id, $api_key) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets/{ticket_id}/users";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($ticket_id != null) {
  			$resourcePath = str_replace("{" . "ticket_id" . "}",
  			                            $this->apiClient->toPathValue($ticket_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[User]');
  		return $responseObject;

      }
  /**
	 * connectUserToTicket
	 * Connect a user to a ticket
   * location_id, int: SubtleData Location ID (required)
   * ticket_id, int: SubtleData Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * body, NewConnection: Into used to connect the user (required)
   * @return ConnectStatus
	 */

   public function connectUserToTicket($location_id, $ticket_id, $api_key, $body) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets/{ticket_id}/users";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($ticket_id != null) {
  			$resourcePath = str_replace("{" . "ticket_id" . "}",
  			                            $this->apiClient->toPathValue($ticket_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ConnectStatus');
  		return $responseObject;

      }
  /**
	 * discountTicket
	 * Discount a ticket
   * location_id, int: SubtleData Location ID (required)
   * ticket_id, int: SubtleData Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * body, DiscountInfo: Details regarding the discount (required)
   * @return Status
	 */

   public function discountTicket($location_id, $ticket_id, $api_key, $body) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets/{ticket_id}/discount";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($ticket_id != null) {
  			$resourcePath = str_replace("{" . "ticket_id" . "}",
  			                            $this->apiClient->toPathValue($ticket_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Status');
  		return $responseObject;

      }
  /**
	 * addPaymentToTicket
	 * Add a credit card payment to a ticket
   * location_id, int: SubtleData Location ID (required)
   * ticket_id, int: SubtleData Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * body, NewPayment: Info used for payment (required)
   * @return PaymentStatus
	 */

   public function addPaymentToTicket($location_id, $ticket_id, $api_key, $body) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets/{ticket_id}/payments";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($ticket_id != null) {
  			$resourcePath = str_replace("{" . "ticket_id" . "}",
  			                            $this->apiClient->toPathValue($ticket_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'PaymentStatus');
  		return $responseObject;

      }
  /**
	 * addExternalPaymentToTicket
	 * Add an external payment to a ticket
   * location_id, int: SubtleData Location ID (required)
   * ticket_id, int: SubtleData Location ID (required)
   * api_key, string: Subtledata API Key (required)
   * body, NewExternalPayment: Info used for payment (required)
   * @return ExternalPaymentStatus
	 */

   public function addExternalPaymentToTicket($location_id, $ticket_id, $api_key, $body) {

  		//parse inputs
  		$resourcePath = "/locations/{location_id}/tickets/{ticket_id}/payments/external";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "PUT";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($location_id != null) {
  			$resourcePath = str_replace("{" . "location_id" . "}",
  			                            $this->apiClient->toPathValue($location_id), $resourcePath);
  		}
  		if($ticket_id != null) {
  			$resourcePath = str_replace("{" . "ticket_id" . "}",
  			                            $this->apiClient->toPathValue($ticket_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'ExternalPaymentStatus');
  		return $responseObject;

      }
  
}


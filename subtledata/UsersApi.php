<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */
class UsersApi {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}

  /**
	 * createUser
	 * Create a user
   * api_key, string: Subtledata API Key (required)
   * body, NewUserDetails: New User Object (required)
   * @return NewUser
	 */

   public function createUser($api_key, $body) {

  		//parse inputs
  		$resourcePath = "/users";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'NewUser');
  		return $responseObject;

      }
  /**
	 * getUser
	 * Get a user by ID
   * user_id, int: Subtledata User ID (required)
   * api_key, string: Subtledata API Key (required)
   * use_cache, bool: Utilize Cached Data (optional)
   * @return User
	 */

   public function getUser($user_id, $api_key, $use_cache=null) {

  		//parse inputs
  		$resourcePath = "/users/{user_id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($use_cache != null) {
  		  $queryParams['use_cache'] = $this->apiClient->toQueryValue($use_cache);
  		}
  		if($user_id != null) {
  			$resourcePath = str_replace("{" . "user_id" . "}",
  			                            $this->apiClient->toPathValue($user_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'User');
  		return $responseObject;

      }
  /**
	 * deleteUser
	 * Delete a user
   * user_id, int: Subtledata User ID (required)
   * api_key, string: Subtledata API Key (required)
   * @return DeleteUserStatus
	 */

   public function deleteUser($user_id, $api_key) {

  		//parse inputs
  		$resourcePath = "/users/{user_id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($user_id != null) {
  			$resourcePath = str_replace("{" . "user_id" . "}",
  			                            $this->apiClient->toPathValue($user_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'DeleteUserStatus');
  		return $responseObject;

      }
  /**
	 * authUser
	 * Authenticate a user
   * api_key, string: Subtledata API Key (required)
   * body, AuthUserRequest: New User Authentication Request (required)
   * @return AuthResponse
	 */

   public function authUser($api_key, $body) {

  		//parse inputs
  		$resourcePath = "/users/authenticate";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'AuthResponse');
  		return $responseObject;

      }
  /**
	 * searchUsersByName
	 * Search for a user by name
   * user_name, string: Subtledata User Name (required)
   * api_key, string: Subtledata API Key (required)
   * use_cache, bool: Utilize Cached Data (optional)
   * @return User
	 */

   public function searchUsersByName($user_name, $api_key, $use_cache=null) {

  		//parse inputs
  		$resourcePath = "/users/search/name/{user_name}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($use_cache != null) {
  		  $queryParams['use_cache'] = $this->apiClient->toQueryValue($use_cache);
  		}
  		if($user_name != null) {
  			$resourcePath = str_replace("{" . "user_name" . "}",
  			                            $this->apiClient->toPathValue($user_name), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'User');
  		return $responseObject;

      }
  /**
	 * getUsersCards
	 * Get a list of stored cards for a user
   * user_id, int: SubtleData User ID (required)
   * api_key, string: Subtledata API Key (required)
   * @return array[Card]
	 */

   public function getUsersCards($user_id, $api_key) {

  		//parse inputs
  		$resourcePath = "/users/{user_id}/cards";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "GET";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($user_id != null) {
  			$resourcePath = str_replace("{" . "user_id" . "}",
  			                            $this->apiClient->toPathValue($user_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'array[Card]');
  		return $responseObject;

      }
  /**
	 * createCardForUser
	 * Create a card for a user
   * user_id, int: SubtleData User ID (required)
   * api_key, string: Subtledata API Key (required)
   * body, NewCard: New Card Object (required)
   * @return CardStatus
	 */

   public function createCardForUser($user_id, $api_key, $body) {

  		//parse inputs
  		$resourcePath = "/users/{user_id}/cards";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "POST";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($user_id != null) {
  			$resourcePath = str_replace("{" . "user_id" . "}",
  			                            $this->apiClient->toPathValue($user_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'CardStatus');
  		return $responseObject;

      }
  /**
	 * deleteUserCreditCard
	 * Delete a user's credit card
   * user_id, int: SubtleData User ID (required)
   * card_id, int: SubtleData User ID (required)
   * api_key, string: Subtledata API Key (required)
   * @return Status
	 */

   public function deleteUserCreditCard($user_id, $card_id, $api_key) {

  		//parse inputs
  		$resourcePath = "/users/{user_id}/cards/{card_id}";
  		$resourcePath = str_replace("{format}", "json", $resourcePath);
  		$method = "DELETE";
      $queryParams = array();
      $headerParams = array();

      if($api_key != null) {
  		  $queryParams['api_key'] = $this->apiClient->toQueryValue($api_key);
  		}
  		if($user_id != null) {
  			$resourcePath = str_replace("{" . "user_id" . "}",
  			                            $this->apiClient->toPathValue($user_id), $resourcePath);
  		}
  		if($card_id != null) {
  			$resourcePath = str_replace("{" . "card_id" . "}",
  			                            $this->apiClient->toPathValue($card_id), $resourcePath);
  		}
  		//make the API Call
      if (! isset($body)) {
        $body = null;
      }
  		$response = $this->apiClient->callAPI($resourcePath, $method,
  		                                      $queryParams, $body,
  		                                      $headerParams);


      if(! $response){
          return null;
        }

  		$responseObject = $this->apiClient->deserialize($response,
  		                                                'Status');
  		return $responseObject;

      }
  
}

